=====================Day-14-Assignment-Session-1=====================
1. create a class and with divide two numbers by using Scanner class.(z=a/b).without try catch
import java.util.Scanner;

public class ScannerClasss {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int div;
        System.out.println("Enter the Value of A: ");
        int a = sc.nextInt();
        System.out.println("Enter the Value of B: ");
        int b = sc.nextInt();
        div = a / b;
        System.out.println("The Result of Divison is: "+div);
    }
}

Output:
=======
Enter the Value of A: 
56
Enter the Value of B: 
14
The Result of Divison is: 4

2. create a class and take the input from by using scanner class, as a end user take two numbers with division and observe which type of exception raised. and apply try catch blocks
	Without try Catch
==========================
import java.util.Scanner;
public class TryCatch {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int div;
        System.out.println("Enter the Value of A: ");
        int a = sc.nextInt();
        System.out.println("Enter the Value of B: ");
        int b = sc.nextInt();
        div = a / b;
        System.out.println("The Result of Divison is: "+div);
    }
}

Output:
=======
Enter the Value of A:
60
Enter the Value of B:
0
Exception in thread "main" java.lang.ArithmeticException: / by zero
        at TryCatch.main(TryCatch.java:10)


By using try Catch:
===================
import java.util.Scanner;
public class TryCatch {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int div;
        System.out.println("Enter the Value of A: ");
        int a = sc.nextInt();
        System.out.println("Enter the Value of B: ");
        int b = sc.nextInt();
        try{
            div = a / b;
            System.out.println("The Result of Divison is: "+div);
        }
        catch(ArithmeticException e){
            System.out.println("Please don't put Denominator as Zero");
        }
        finally{
            System.out.println("This line will always Executed");
        }
    }
}

Output:
=======
Enter the Value of A:
56
Enter the Value of B:
0
Please don't put Denominator as Zero
This line will always Executed

3. Create a class with single try multi catch blocks.
public class MultiCatcheBlock {
    public static void main(String[] args) {
        try{
            
            int arr[] = new int[7];
            arr[5] = 45 / 5;
            String str = null;
            Integer i = Integer.parseInt(str);
            System.out.println("No Exception Found==> "+arr[5]+" "+i+" Length of the String is: "+str.length());
            System.out.println(arr[10]);
            System.out.println(str.length());
        }
        catch(ArrayIndexOutOfBoundsException e){
            System.out.println("Invalid Array Index!");
        }
        catch(ArithmeticException e){
            System.out.println("Don't put denominator as zero!!!");
        }
        catch(NumberFormatException e){
            System.out.println("Can't Convert String to Number or Null to Number!!!");
        }
        catch(Exception e){
            System.out.println("Parent Exception Occur!!!");
        }
        finally{
            System.out.println("This block will always executed!!!");
        }
    }
}


==========================Session-2==============================

1. create a class with user defined exceptions.
public class CreateThrowsException {
    public void ownException(String str){
        if(str == null)
        throw new NumberFormatException("Our own NumberFormatException exception");
        else{
            System.out.println("String is:"+str);
        }
    }
    public void ownException1(int number){
        if(number < 10)
        throw new ArithmeticException("Our own ArithmeticException exception!!");
        else
        {
            System.out.println("The number is: "+number);
        }
    }
    public static void main(String[] args) {
        CreateThrowsException cex = new CreateThrowsException();
        cex.ownException("juned");
        cex.ownException1(5);
    }
}


Output:
=======
String is:juned
Exception in thread "main" java.lang.ArithmeticException: Our own ArithmeticException exception!!
        at CreateThrowsException.ownException1(CreateThrowsException.java:11)
        at CreateThrowsException.main(CreateThrowsException.java:20)


2. create a class with Marks, and valid Marks method, give some number marks are less than he/she fails otherwise pass by using throw keyword.
class MyExceptionn extends Exception{
    private int marks;
    public MyExceptionn(int marks){
        this.marks = marks;
    }
    public String toString(){
        return "You are failed!!! Try again!!!";
    }

}
public class MarksException {
    static void validate(int marks) throws MyExceptionn{
        if(marks < 40)
        throw new MyExceptionn(marks);
        else
        System.out.println("You are passed!!!");
    }  
    public static void main(String[] args) throws MyExceptionn {
        MarksException.validate(23);
        System.out.println("This code will executed");
    } 
}
